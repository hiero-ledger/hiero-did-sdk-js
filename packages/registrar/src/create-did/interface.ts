import { PrivateKey } from '@hashgraph/sdk';
import { DIDDocument } from '@hiero-did-sdk/core';
import { OperationState, SigningRequest, CommonRegistrarOptions } from '../interfaces';
import { TopicReader } from '@hiero-did-sdk/resolver';

export interface CreateDIDOptions extends CommonRegistrarOptions {
  /**
   * The controller of the DID. If not provided, the DID will be self-controlled.
   */
  controller?: string;

  /**
   * The topic ID to use for the DID. If not provided, the new topic will be created.
   */
  topicId?: string;

  /**
   * The private key to use for the DID.
   * If not provided, a new private key will be generated.
   * If a Signer is provided in the providers, this will be ignored.
   */
  privateKey?: string | PrivateKey;
}

export interface CreateDIDResult {
  /**
   * The DID that was created.
   */
  did: string;

  /**
   * The DID document that was created.
   */
  didDocument: DIDDocument;

  /**
   * The private key that was generated.
   */
  privateKey?: PrivateKey;
}

export interface CreateDIDRequest {
  /**
   * The state of the current operation.
   */
  state: OperationState;

  /**
   * The signing request for the operation.
   */
  signingRequest: SigningRequest;
}

export interface GenerateCreateDIDRequestOptions extends Pick<CreateDIDOptions, 'controller' | 'topicId'> {
  /**
   * The public key in multibase format. Used to create a DID and a `did-root-key` verification method.
   */
  multibasePublicKey: string;

  /**
   * The topic reader to use for the operation.
   */
  topicReader?: TopicReader;
}

export interface SubmitCreateDIDRequestOptions extends CommonRegistrarOptions {
  /**
   * Current state of the operation, generated by the `generateCreateDIDRequest` function.
   */
  state: OperationState;

  /**
   * The signature of the signing request.
   */
  signature: Uint8Array;
}
